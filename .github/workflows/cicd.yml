name: Java Spring Boot CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.7'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'
        
    - name: Run chmod to make gradlew executable
      run: chmod +x gradlew

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: Build with Gradle
      run: ./gradlew build

    - name: Convert repository name to lowercase
      run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Convert repository name to lowercase
      run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST_NAME: ${{ secrets.EC2_HOST }}
        USER_NAME: ${{ secrets.EC2_USER }}
        ENV_CONTENT: ${{ secrets.ENV }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} '
          set -e
          echo "Deployment started..."
          
          echo "Changing to /home/ec2-user/spring-boot directory..."
          cd /home/ec2-user/docker/spring
          
          # Login to GitHub Container Registry
          echo "Logging in to GitHub Container Registry..."
          echo ${{ secrets.PAT_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          echo "Pulling the latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest
          
          # Create .env file
          echo "Creating .env file..."
          echo "${{ env.ENV_CONTENT }}" > .env
          
          # Stop and remove the existing Spring Boot container if it exists
          echo "Stopping existing Spring Boot container..."
          docker stop spring-boot-container || true
          docker rm spring-boot-container || true
          
          # Start the new Spring Boot container
          echo "Starting new Spring Boot container..."
          docker run -d --name spring-boot-container \
            -p 8080:8080 \
            -v $(pwd)/.env:/app/.env \
            ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest
          
          # Verify the Spring Boot container is running
          echo "Verifying Spring Boot container status..."
          docker ps | grep spring-boot-container
          
          # Cleanup
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "Deployment completed successfully!"
        '
